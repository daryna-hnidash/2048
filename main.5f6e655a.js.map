{"version":3,"sources":["scripts/main.js"],"names":["gameFieldElement","document","querySelector","gameScore","startBtn","messageLose","messageWin","messageStart","rows","columns","score","gameStarted","gameField","addEventListener","firstChild","removeChild","classList","add","setGame","remove","textContent","innerText","r","c","cell","createElement","id","updateCell","append","addTile","hasEmptyTile","found","Math","floor","random","num","tile","getElementById","toString","isWon","isLost","updateHandler","copyField","JSON","parse","stringify","updateGameField","value","slide","row","slidedRow","filter","isNaN","length","push","slideLeft","fieldCopy","slideRight","newRow","reverse","slideUp","index","slideDown","e","code"],"mappings":"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","file":"main.5f6e655a.js","sourceRoot":"..\\src","sourcesContent":["/* eslint-disable no-console */\n'use strict';\n\nconst gameFieldElement = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst startBtn = document.querySelector('.button');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nconst rows = 4;\nconst columns = 4;\nlet score = 0;\nlet gameStarted = false;\nlet gameField = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nstartBtn.addEventListener('click', () => {\n  if (gameStarted) {\n    while (gameFieldElement.firstChild) {\n      gameFieldElement.removeChild(gameFieldElement.firstChild);\n    }\n\n    gameField = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  }\n\n  messageStart.classList.add('hidden');\n  setGame();\n  gameStarted = true;\n\n  startBtn.classList.remove('start');\n  startBtn.classList.add('restart');\n  startBtn.textContent = 'Restart';\n  score = 0;\n  gameScore.innerText = score;\n});\n\nconst setGame = () => {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const cell = document.createElement('div');\n\n      cell.id = `${r}-${c}`;\n\n      const num = gameField[r][c];\n\n      updateCell(cell, num);\n      gameFieldElement.append(cell);\n    }\n  }\n\n  addTile();\n  addTile();\n};\n\nfunction hasEmptyTile() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (gameField[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction addTile() {\n  if (!hasEmptyTile()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n    const num = Math.random() > 0.1 ? 2 : 4;\n\n    if (gameField[r][c] === 0) {\n      gameField[r][c] = num;\n\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n      tile.innerText = num.toString();\n      tile.classList.add('field-cell--' + num);\n      found = true;\n    }\n  }\n}\n\nfunction isWon() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (gameField[r][c] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction isLost() {\n  if (hasEmptyTile()) {\n    return false;\n  }\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns - 1; c++) {\n      if (gameField[r][c] === gameField[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let r = 0; r < rows - 1; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (gameField[r][c] === gameField[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\ndocument.addEventListener('keyup', (e) => {\n  if (e.code === 'ArrowLeft') {\n    slideLeft();\n  }\n\n  if (e.code === 'ArrowRight') {\n    slideRight();\n  }\n\n  if (e.code === 'ArrowUp') {\n    slideUp();\n  }\n\n  if (e.code === 'ArrowDown') {\n    slideDown();\n  }\n\n  if (isWon()) {\n    messageWin.classList.remove('hidden');\n  }\n\n  if (isLost()) {\n    messageLose.classList.remove('hidden');\n  }\n});\n\nfunction updateHandler(copyField) {\n  if (copyField.toString() !== gameField.toString()) {\n    gameField = JSON.parse(JSON.stringify(copyField));\n\n    updateGameField();\n    addTile();\n  }\n}\n\nfunction updateGameField() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const cell = document.getElementById(r.toString() + '-' + c.toString());\n      const num = gameField[r][c];\n\n      updateCell(cell, num);\n    }\n  }\n}\n\nfunction updateCell(cell, num) {\n  cell.innerText = '';\n  cell.classList.value = '';\n  cell.classList.add('field-cell');\n\n  if (num > 0) {\n    cell.innerText = num;\n    cell.classList.add(`field-cell--${num}`);\n  }\n}\n\nfunction slide(row) {\n  let slidedRow = row.filter(num => num !== 0);\n\n  for (let c = 0; c < columns - 1; c++) {\n    if (slidedRow[c] === slidedRow[c + 1]) {\n      slidedRow[c] *= 2;\n      slidedRow[c + 1] = 0;\n      score += +slidedRow[c] | 0;\n      gameScore.innerText = score;\n    }\n  }\n  slidedRow = slidedRow.filter(num => num !== 0 && !isNaN(num));\n\n  while (slidedRow.length < columns) {\n    slidedRow.push(0);\n  };\n\n  return slidedRow;\n}\n\nfunction slideLeft() {\n  const fieldCopy = JSON.parse(JSON.stringify(gameField));\n\n  for (let r = 0; r < rows; r++) {\n    let row = fieldCopy[r];\n\n    row = slide(row);\n    fieldCopy[r] = row;\n  };\n\n  updateHandler(fieldCopy);\n};\n\nfunction slideRight() {\n  const fieldCopy = JSON.parse(JSON.stringify(gameField));\n\n  for (let r = 0; r < rows; r++) {\n    let row = fieldCopy[r];\n\n    row = row.reverse();\n    row = slide(row);\n\n    const newRow = row.reverse();\n\n    fieldCopy[r] = newRow;\n  };\n\n  updateHandler(fieldCopy);\n};\n\nfunction slideUp() {\n  const fieldCopy = JSON.parse(JSON.stringify(gameField));\n\n  for (let c = 0; c < rows; c++) {\n    let row = [\n      fieldCopy[0][c],\n      fieldCopy[1][c],\n      fieldCopy[2][c],\n      fieldCopy[3][c],\n    ];\n\n    row = slide(row);\n\n    for (let index = 0; index < rows; index++) {\n      fieldCopy[index][c] = row[index];\n    }\n  };\n\n  updateHandler(fieldCopy);\n};\n\nfunction slideDown() {\n  const fieldCopy = JSON.parse(JSON.stringify(gameField));\n\n  for (let c = 0; c < rows; c++) {\n    let row = [\n      fieldCopy[0][c],\n      fieldCopy[1][c],\n      fieldCopy[2][c],\n      fieldCopy[3][c],\n    ];\n\n    row = slide(row.reverse());\n    row = row.reverse();\n\n    for (let index = 0; index < rows; index++) {\n      fieldCopy[index][c] = row[index];\n    }\n  };\n\n  updateHandler(fieldCopy);\n};\n"]}